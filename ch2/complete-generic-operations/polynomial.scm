(load "termlist.scm")

(define (install-polynomial-package)
  (install-term-list-package)
  ;; internal procedures
  ;; representation of poly
  (define (make-poly variable term-list) (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (add (term-list p1) (term-list p2)))
	(error "Polys not in same var: ADD-POLY" (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (mul (term-list p1) (term-list p2)))
	(error "Polys not in same var: MUL-POLY" (list p1 p2))))
  (define (negate-poly p)
    (make-poly (variable p) (negate (term-list p))))
  (define (=zero-poly? p) (=zero? (term-list p)))
  (define (equ-poly? p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(equ? (term-list p1) (term-list p2))
	(error "Polys not in same var: REDUCE-POLY" (list p1 p2))))
  ;; interface to rest of the system
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 (negate-poly p2)))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  (put '=zero? '(polynomial) =zero-poly?)
  (put 'equ? '(polynomial polynomial) equ-poly?)
  (put 'negate '(polynomial) (lambda (p) (tag (negate-poly p))))
  'done)

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))
